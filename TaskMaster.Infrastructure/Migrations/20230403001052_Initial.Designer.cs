// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskMaster.Manager.Infrastructure;

#nullable disable

namespace TaskMaster.Infrastructure.Migrations
{
	[DbContext(typeof(AppDbContext))]
	[Migration("20230403001052_Initial")]
	partial class Initial
	{
		/// <inheritdoc />
		protected override void BuildTargetModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

			modelBuilder.Entity("Issues.Manager.Domain.Entities.Comment", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("INTEGER");

					b.Property<string>("Content")
						.HasColumnType("TEXT");

					b.Property<DateTime>("PostedDate")
						.HasColumnType("TEXT");

					b.Property<int>("TicketId")
						.HasColumnType("INTEGER");

					b.Property<string>("UserId")
						.IsRequired()
						.HasColumnType("TEXT");

					b.HasKey("Id");

					b.HasIndex("TicketId");

					b.ToTable("Comments");
				});

			modelBuilder.Entity("Issues.Manager.Domain.Entities.Ticket", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("INTEGER");

					b.Property<DateTime?>("CompletedAt")
						.HasColumnType("TEXT");

					b.Property<DateTime>("Created")
						.HasColumnType("TEXT");

					b.Property<string>("Description")
						.IsRequired()
						.HasMaxLength(100)
						.HasColumnType("TEXT");

					b.Property<bool>("IsCompleted")
						.HasColumnType("INTEGER");

					b.Property<int>("Priority")
						.HasColumnType("INTEGER");

					b.Property<int>("TicketType")
						.HasColumnType("INTEGER");

					b.Property<string>("Title")
						.IsRequired()
						.HasMaxLength(50)
						.HasColumnType("TEXT");

					b.Property<string>("UserId")
						.IsRequired()
						.HasColumnType("TEXT");

					b.HasKey("Id");

					b.ToTable("Tickets");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
				{
					b.Property<string>("Id")
						.HasColumnType("TEXT");

					b.Property<string>("ConcurrencyStamp")
						.IsConcurrencyToken()
						.HasColumnType("TEXT");

					b.Property<string>("Name")
						.HasMaxLength(256)
						.HasColumnType("TEXT");

					b.Property<string>("NormalizedName")
						.HasMaxLength(256)
						.HasColumnType("TEXT");

					b.HasKey("Id");

					b.HasIndex("NormalizedName")
						.IsUnique()
						.HasDatabaseName("RoleNameIndex");

					b.ToTable("AspNetRoles", (string)null);

					b.HasData(
						new
						{
							Id = "46812cac-1a2a-4df1-b2dc-d3c1637c538a",
							Name = "Project Manager",
							NormalizedName = "PROJECT MANAGER"
						},
						new
						{
							Id = "0ba9811a-5c0a-451a-ae40-1510fa552cc6",
							Name = "Developer",
							NormalizedName = "DEVELOPER"
						},
						new
						{
							Id = "8ba8696f-ff60-4c18-9a44-39a82ac8e5f7",
							Name = "Quality Assurance",
							NormalizedName = "Quality Assurance"
						},
						new
						{
							Id = "9de3ec72-4f41-422a-81db-ac39767590ca",
							Name = "Administrator",
							NormalizedName = "ADMINISTRATOR"
						});
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("INTEGER");

					b.Property<string>("ClaimType")
						.HasColumnType("TEXT");

					b.Property<string>("ClaimValue")
						.HasColumnType("TEXT");

					b.Property<string>("RoleId")
						.IsRequired()
						.HasColumnType("TEXT");

					b.HasKey("Id");

					b.HasIndex("RoleId");

					b.ToTable("AspNetRoleClaims", (string)null);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
				{
					b.Property<string>("Id")
						.HasColumnType("TEXT");

					b.Property<int>("AccessFailedCount")
						.HasColumnType("INTEGER");

					b.Property<string>("ConcurrencyStamp")
						.IsConcurrencyToken()
						.HasColumnType("TEXT");

					b.Property<string>("Email")
						.HasMaxLength(256)
						.HasColumnType("TEXT");

					b.Property<bool>("EmailConfirmed")
						.HasColumnType("INTEGER");

					b.Property<bool>("LockoutEnabled")
						.HasColumnType("INTEGER");

					b.Property<DateTimeOffset?>("LockoutEnd")
						.HasColumnType("TEXT");

					b.Property<string>("NormalizedEmail")
						.HasMaxLength(256)
						.HasColumnType("TEXT");

					b.Property<string>("NormalizedUserName")
						.HasMaxLength(256)
						.HasColumnType("TEXT");

					b.Property<string>("PasswordHash")
						.HasColumnType("TEXT");

					b.Property<string>("PhoneNumber")
						.HasColumnType("TEXT");

					b.Property<bool>("PhoneNumberConfirmed")
						.HasColumnType("INTEGER");

					b.Property<string>("SecurityStamp")
						.HasColumnType("TEXT");

					b.Property<bool>("TwoFactorEnabled")
						.HasColumnType("INTEGER");

					b.Property<string>("UserName")
						.HasMaxLength(256)
						.HasColumnType("TEXT");

					b.HasKey("Id");

					b.HasIndex("NormalizedEmail")
						.HasDatabaseName("EmailIndex");

					b.HasIndex("NormalizedUserName")
						.IsUnique()
						.HasDatabaseName("UserNameIndex");

					b.ToTable("AspNetUsers", (string)null);

					b.HasData(
						new
						{
							Id = "00000000-0000-0000-0000-000000000000",
							AccessFailedCount = 0,
							ConcurrencyStamp = "42fdb214-5148-485b-a6b4-45746aef8868",
							Email = "JhonDoe@gmail.com",
							EmailConfirmed = false,
							LockoutEnabled = false,
							PhoneNumberConfirmed = false,
							SecurityStamp = "616b677b-24d8-4557-aa61-465b6379c8f0",
							TwoFactorEnabled = false,
							UserName = "JohnDoe"
						});
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("INTEGER");

					b.Property<string>("ClaimType")
						.HasColumnType("TEXT");

					b.Property<string>("ClaimValue")
						.HasColumnType("TEXT");

					b.Property<string>("UserId")
						.IsRequired()
						.HasColumnType("TEXT");

					b.HasKey("Id");

					b.HasIndex("UserId");

					b.ToTable("AspNetUserClaims", (string)null);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
				{
					b.Property<string>("LoginProvider")
						.HasColumnType("TEXT");

					b.Property<string>("ProviderKey")
						.HasColumnType("TEXT");

					b.Property<string>("ProviderDisplayName")
						.HasColumnType("TEXT");

					b.Property<string>("UserId")
						.IsRequired()
						.HasColumnType("TEXT");

					b.HasKey("LoginProvider", "ProviderKey");

					b.HasIndex("UserId");

					b.ToTable("AspNetUserLogins", (string)null);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
				{
					b.Property<string>("UserId")
						.HasColumnType("TEXT");

					b.Property<string>("RoleId")
						.HasColumnType("TEXT");

					b.HasKey("UserId", "RoleId");

					b.HasIndex("RoleId");

					b.ToTable("AspNetUserRoles", (string)null);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
				{
					b.Property<string>("UserId")
						.HasColumnType("TEXT");

					b.Property<string>("LoginProvider")
						.HasColumnType("TEXT");

					b.Property<string>("Name")
						.HasColumnType("TEXT");

					b.Property<string>("Value")
						.HasColumnType("TEXT");

					b.HasKey("UserId", "LoginProvider", "Name");

					b.ToTable("AspNetUserTokens", (string)null);
				});

			modelBuilder.Entity("Issues.Manager.Domain.Entities.Comment", b =>
				{
					b.HasOne("Issues.Manager.Domain.Entities.Ticket", "Ticket")
						.WithMany("Comments")
						.HasForeignKey("TicketId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Ticket");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
						.WithMany()
						.HasForeignKey("RoleId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
						.WithMany()
						.HasForeignKey("RoleId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Issues.Manager.Domain.Entities.Ticket", b =>
				{
					b.Navigation("Comments");
				});
#pragma warning restore 612, 618
		}
	}
}
